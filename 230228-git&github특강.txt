## 깃허브 특강 (2일차) ##

-	IT 전문가 : <도메인 지식> + 코딩 능력 + 4차산업

-	깃
1. 배경: 리눅스 토르발즈가 자신의 코드를 관리하기 위해서 직접 만든 s/w (2005)

2. 깃 설치 (= 소스트리): 작업 디렉터리, 스테이지, 저장소
          -  작업 디렉터리: 소스트리 보관소  Add
          -  스테이지: 버전을 확정할 후보들의 임시 무대 Commit
          -  저장소: 버전들이 확정된 공간

3. 깃 응용
  - 버전 관리 : 이전버점과 뭐가 다르지?
  - 버전 되돌리기
     - revert: 현재 커밋 아까움, 현재 보관하고, 그 앞의 것을 새 커밋으로 복사  가끔만 쓰자
     - reset: 그냥 현재 커밋 날려~ (soft, miced, hard) + 덤프 
	 - 임시보관 (스태시)  하나씩만 써라, 필요없으면 삭제해라.

4. 깃 고급 (협업을 위한 준비): 브랜치
  - 브랜치(나뭇가지): 버전을 여러 개의 흐름으로 관리함, 버전의 분기 (브랜치는 무조건 하나는 있다.)

브랜치로 버전의 분기를 관리하는 방법
1.	브랜치를 나눈다
2.	각자의 브랜치에서 작업한다
3.	(필요하다면) 나눈 브랜치를 합친다.

최초의 브랜치: 마스터 브랜치(깃) == 메인 브랜치(깃허브)

Head : 현재 작업중인 커밋
체크아웃: head를 변경하는 작업ex)b로 체크아웃 해라 == b 를 head로 해라 (우클릭해서 체크아웃 누르면 바꿀수 있음)

-	브랜치 합치기(Merge, 머지)
1.	빨리감기 병합
2.	일반 병합

-	브랜치 충돌: 같은애를 두군데서 수정(동시작업)했을 때  둘중 하나는 버려야함

깃허브
-	깃허브 :  개발자의 인스타그램, 원격저장소 호스팅 서비스

-	Clone(클론)은 다운로드 개념
-	push는 업로드 개념
-	fetch는 원격 저장소의 변경사항을 일단 갖고만 오기
-	pull은 원격 저장소의 변경사항을 가져와서 로컬과 합치기


-	클론: 원격저장소 복제 (쌍둥이를 만든거 라고 생각)

브랜치에 (main인지 master인지에 따라 어디서 시작했는지 알수 있음)
 - main: 깃허브에서 시작 클론한애들은 main이라고 되있음
 - master: 소스트리에서 시작 

클론해온거를 그사람꺼에 내가 푸시할수 없다.
(당연하다! 누군가가 마음대로 고치면 말가질 수 있기 때문에 푸시 불가)

**** 중요 1 ****
1.	깃허브 저장소를 내 소스트리와 클론 + 작업 + 푸쉬

**** 중요2 ****
기존에 작업하던 깃 프로젝트가 있다. 그런데, 이제부터는 이것도 깃허브에서 함께 관리하자.
---> 깃허브 저장소에 올리고 클론 + 작업 + 푸쉬 ….

