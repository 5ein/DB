-	Git: 버전관리 시스템 (프로그램)

-	깃을 사용하면?
	1.변경 내역들을 확인할 수 있다.
	2.필요하다면 작업을 되돌린다.
	3.여러 명의 코드를 쉽게 나누고 합치며 개발할 수 있다.

-	소스 트리: 깃을 포장해주는 역할 깃을 쉽게 사용할 수 있게 함(GUI)
		UI이기 때문에 깃을 먼저 깐 뒤! 소스 트리 깔아야 함.

-	깃허브: 깃(git) 저장소(cloud)
		개발자의 insta라고 생각하면 됨 (내 코드를 자랑하고, 어필하는 공간)

-	버전: 유의미한 변화가 결과물로 나온 것 (커밋들)

-	프로그램 개발: 버전을 쌓아 프로그램을 만들어 나가는것

## 깃 ##
-	작업디렉터리  프로그램 소스폴더(버전 관리의 대상이 위치하는 공간 (. git이 있는 디렉터리))
-	스테이지  깃이 관리(다음버전이 될 후보가 올라가는 공간(git이 관리하는 가상의 공간))
-	저장소  깃이 관리 (버전이 만들어지고 관리되는 공간(git이 관리하는 가상의 공간))

## 하나의 버전이 만들어지는 과정 ##
	1. 작업 디렉터리 내에서 변경사항 생성(일반적인 코딩 작업)
	2. 스테이지로 add
	3. 저장소로 commit 

-	Add: 작업 디렉터리의 내용을 스테이지에 올리는 것
-	Commit: 스테이지의 내용을 저장소에 올리는 것

## 소스트리의 줄 색상 뜻 ##
초록색 형광펜(+): 추가한 내용
빨간색 형광펜(-): 삭제한 내용


-	커밋 해시: 각각의 버전에 지칭된 고유한 정보(ID) 
		너무 길어서, 커밋 해시의 일부인 앞에서7번째까지만 사용하기도 함

-	태그: 특정 커밋을 좀더 가독성 있도록 붙이는 꼬리표
		태그를 쓰는 이유?
		- 여러 커밋 중에서 더 유의미한 커밋을 지칭하기 위함.
		- 예로 릴리즈 하기위한 커밋.
		- 형식: ver0.0.1 또는 v0.0.1 이런식으로 버전을 나타냄

깃(git)은 어디가 바뀌었는지, 관리해야 되는지만 상관함.
	코드의 문법오류 등은 잡아내지 못함. 

-	버전 비교: 서로 다른 커밋을 비교하는 것 (커밋 이전의 내용뿐만 아니라, 커밋 이전의 파일도 접근할 수 있음)

## 버전되돌리기 2가지 방법 ##
- 방법 1. Revert: 버전을 되돌린 새로운 버전 만들기 (내가 헷갈린대 꼭필요할때만 사용!)
- 방법 2. Reset: 버전을 완전히 되돌리기 3가지 방법
	- 방법1. Soft reset: 커밋 사실만 되돌리기 (많이는 쓰지말래 내가 헷갈린대)
	- 방법 2. Mixed reset: 스테이지까지 되돌리기 (많이는 쓰지말래 내가 헷갈린대)
	- 방법 3. Hard reset: 작업 디렉터리까지 되돌리기 (dump 뜨고 hard reset을 사용하는게 좋다고 하셨다.)

-	스태시(Stash): 커밋과 관계없이 임시보관 하는 것!! (수정하던 애를 임시보관)
		살리면 남겨두지말고 지우기(나중에되면 이게 중요했던건가 싶어서 못지우게 된다고 하셨다.)
		(내가 헷갈릴수 있어 꼭필요할때만 사용하래!)

